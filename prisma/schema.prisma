// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  username     String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(cuid()) @map("_id")
  username  String    @unique
  password  String?
  email     String    @unique
  street    String?
  city      String?
  phone     String?
  image     String?
  role      Role      @default(USER)
  provider  Provider  @default(CREDENTIALS)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
  orders    Order[]
}

model Category {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  menus     Menu[]   @relation(fields: [menuIDs], references: [id])
  menuIDs   String[]
}

model Image {
  id     String @id @default(cuid()) @map("_id")
  url    String
  menu   Menu   @relation(fields: [menuId], references: [id])
  menuId String
}

model Menu {
  id          String     @id @default(cuid()) @map("_id")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String     @unique
  description String
  price       Float
  images      Image[]
  categories  Category[] @relation(fields: [categoryIDs], references: [id])
  categoryIDs String[]
  cartItems   CartItem[]
}

model Order {
  id           String     @id @default(cuid()) @map("_id")
  paid         Boolean
  cartItems    CartItem[]
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  customerName String
  email        String
  street       String
  city         String
  phone        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model CartItem {
  id       String @id @default(cuid()) @map("_id")
  menu     Menu   @relation(fields: [menuID], references: [id])
  menuID   String
  size     String
  quantity Int
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  String
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum Provider {
  GOOGLE
  CREDENTIALS
}
